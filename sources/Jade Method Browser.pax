| package |
package := Package name: 'Jade Method Browser'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.087'.

package basicScriptAt: #postinstall put: 'JadeMethodListPresenter setListView.'.

package classNames
	add: #GsMethod2;
	add: #JadeAbstractHistoryEntry;
	add: #JadeMethodExplorerHistoryEntry;
	add: #JadeMethodHistoryBrowser;
	add: #JadeMethodListBrowser;
	add: #JadeMethodListPresenter;
	add: #JadeTreeMethodListPresenter;
	add: #MethodListPresenter;
	add: #MethodSourcePresenter;
	yourself.

package methodNames
	add: #GsClass -> #methodsUpTo:filterList:isVariables:;
	add: #GsClass -> #sourceFor:;
	add: #GsClass -> #stepPointsFor:;
	add: #JadePresenterA -> #browseImplementorsOf:;
	add: #JadePresenterA -> #browseSendersOf:;
	add: #JadeServer -> #_addMethod:toStream:;
	add: #JadeServer -> #_behavior:categoryOfSelector:;
	add: #JadeServer -> #_behaviorFor:in:;
	add: #JadeServer -> #_implementorsOf:;
	add: #JadeServer -> #_methodsContaining:;
	add: #JadeServer -> #_methodsFor:categories:;
	add: #JadeServer -> #_methodsFor:filter:isVariables:;
	add: #JadeServer -> #_methodsFor:variables:;
	add: #JadeServer -> #_packageNameFor:;
	add: #JadeServer -> #_referencesToObject:;
	add: #JadeServer -> #_sendersOf:;
	add: #JadeServer -> #_streamOfMethods:;
	add: #JadeServer -> #_stringOfLineNumbersWithBreaksIn:;
	add: #JadeServer -> #compileMethod:behavior:symbolList:inCategory:;
	add: #JadeServer -> #compileMethod:behavior:user:inCategory:;
	add: #JadeServer -> #implementorsOf:;
	add: #JadeServer -> #implementorsOf:startingAt:;
	add: #JadeServer -> #methodsContaining:;
	add: #JadeServer -> #methodsFor:upTo:filter:isVariables:;
	add: #JadeServer -> #runAsTest:;
	add: #JadeServer -> #sbSaveMethod:;
	add: #JadeServer -> #selectorsMatching:;
	add: #JadeServer -> #sendersOf:;
	add: #JadeServer -> #sourceFor:in:;
	add: #JadeServer -> #stepPointsFor:in:;
	add: #JadeServer -> #streamOfMethods:;
	add: #JadeServer64bit33 -> #sendersOf:;
	add: #JadeServer64bit3x -> #_behavior:categoryOfSelector:;
	add: #JadeServer64bit3x -> #_methodsFor:categories:;
	add: #JadeServer64bit3x -> #compileMethod:behavior:symbolList:inCategory:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\IDE\Base\Development System'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Models\Tree\Dolphin Tree Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Tree\Dolphin Tree Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'GemStone Objects'
	'GemStone Session'
	'Jade Class Browser'
	'Jade UI Base').

package!

"Class Definitions"!

Object subclass: #JadeAbstractHistoryEntry
	instanceVariableNames: 'methodName className classCategory'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #GsMethod2
	instanceVariableNames: 'gsClass category isTestCase'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeAbstractHistoryEntry subclass: #JadeMethodExplorerHistoryEntry
	instanceVariableNames: 'treeSelection methodCategory gsMethod'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadePresenterA subclass: #MethodListPresenter
	instanceVariableNames: 'methodListPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CodeSourcePresenter subclass: #MethodSourcePresenter
	instanceVariableNames: 'currentSelector gsMethod originalSource'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeBrowserPresenter subclass: #JadeMethodListPresenter
	instanceVariableNames: 'methodListPresenter methodSourcePresenter searchBlock'
	classVariableNames: 'JadeMethodBrowserPresenterClass'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeMethodListPresenter subclass: #JadeTreeMethodListPresenter
	instanceVariableNames: 'treeMethodsPresenter treeMethodsMap historyEntries entriesIndex historyList historyIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #JadeMethodHistoryBrowser
	instanceVariableNames: 'versionListPresenter editorPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #JadeMethodListBrowser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!GsClass methodsFor!

methodsUpTo: aClass filterList: aList isVariables: aBoolean

	|  stream string |
	stream := WriteStream on: String new.
	aList do: [:each | stream nextPutAll: each; tab].
	string := gciSession
		serverPerform: #'methodsFor:upTo:filter:isVariables:' 
		with: self
		with: aClass
		with: (gciSession encode: stream contents) 
		with: aBoolean.
	string := gciSession decode: string.
	^GsMethod2
		listFromString: string 
		session: gciSession.
!

sourceFor: anObject

	^gciSession
		serverPerform: #'sourceFor:in:'
		with: anObject
		with: self.
!

stepPointsFor: aGsMethod

	^gciSession
		serverPerform: #'stepPointsFor:in:'
		with: aGsMethod
		with: self.
! !
!GsClass categoriesFor: #methodsUpTo:filterList:isVariables:!Methods!public! !
!GsClass categoriesFor: #sourceFor:!Methods!public! !
!GsClass categoriesFor: #stepPointsFor:!Methods!public! !

!JadePresenterA methodsFor!

browseImplementorsOf: aGsMethodOrString

	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseImplementorsOf: aGsMethodOrString].
	(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseImplementorsOf: aGsMethodOrString;
		yourself.
!

browseSendersOf: aGsMethodOrString

	(parentPresenter class = JadeTreeMethodListPresenter) ifTrue: [^parentPresenter browseSendersOf: aGsMethodOrString].

	(JadeMethodListBrowser showOnSession: self gciSession) primaryPresenter
		browseSendersOf: aGsMethodOrString;
		yourself.
! !
!JadePresenterA categoriesFor: #browseImplementorsOf:!public! !
!JadePresenterA categoriesFor: #browseSendersOf:!public! !

!JadeServer methodsFor!

_addMethod: aGsMethod toStream: aStream
	"Private - See GsMethod2>>initialize:"

	| inClass testCaseClass |
	inClass := aGsMethod inClass.
"1"	(self oopOf: aGsMethod) printOn: aStream.
	aStream 
"2"		tab; nextPutAll: aGsMethod selector; 
"3"		tab; nextPutAll: (self _behavior: inClass categoryOfSelector: aGsMethod selector);
		tab.

	"Class"
"4"	(self oopOf: inClass) printOn: aStream.
"5"	aStream tab; nextPutAll: inClass name; tab.
"6"	inClass category notNil ifTrue: [aStream nextPutAll: inClass category].
"7"	aStream tab; nextPutAll: (self _nameOfFirstDictionaryReferencing: inClass thisClass); tab.

	"SUnit Test Method"
	testCaseClass := Globals
		at: #'TestCase'
		ifAbsent: [nil].
"8"	((testCaseClass notNil and: [inClass isSubclassOf: testCaseClass]) and: [inClass testSelectors includes: aGsMethod selector]) printOn: aStream.
	aStream lf.
!

_behavior: aBehavior categoryOfSelector: aSymbol

	^aBehavior categoryOfSelector: aSymbol!

_behaviorFor: selector in: aClass

	| behavior |
	behavior := aClass.
	[
		behavior notNil.
	] whileTrue: [
		(behavior includesSelector: selector) ifTrue: [^behavior].
		behavior := behavior superclass.
	].
	self error: 'Method not found in class or in any superclass'.
!

_implementorsOf: anObject

	| symbol |
	symbol := (anObject isKindOf: String)
		ifTrue: [anObject asSymbol]
		ifFalse: [anObject selector].
	^self _streamOfMethods: (self classOrganizer implementorsOf: symbol).
!

_methodsContaining: aString

	^self _streamOfMethods: (self classOrganizer substringSearch: aString) first
!

_methodsFor: aClass categories: aList

	| methods |
	methods := IdentitySet new.
	aList do: [:eachCategory | 
		(aClass _includesCategory: eachCategory) ifTrue: [
			(aClass selectorsIn: eachCategory) do: [:eachSelector |
				methods add: (self compiledMethodAt: eachSelector inClass: aClass).
			].
		].
	].
	^methods.

!

_methodsFor: aClass filter: aList isVariables: aBoolean

	^aBoolean 
		ifTrue:	[self _methodsFor: aClass variables: 	aList]
		ifFalse:	[self _methodsFor: aClass categories: aList].
!

_methodsFor: aClass variables: aList

	| methods |
	aList isEmpty ifTrue: [^aClass selectors collect: [:each | self compiledMethodAt: each inClass: aClass]].
	methods := IdentitySet new.
	aClass selectors do: [:each | 
		| method intersect |
		method := self compiledMethodAt: each inClass: aClass.
		intersect := method instVarsAccessed * aList.
		intersect notEmpty ifTrue: [methods add: method].
	].
	^methods.
!

_packageNameFor: aCategoryName

	| string mcWorkingCopyClass list |
	(mcWorkingCopyClass := self mcWorkingCopyClass) isNil ifTrue: [^''].
	string := aCategoryName asUppercase copyFrom: 2 to: aCategoryName size.
	list := mcWorkingCopyClass allManagers collect: [:each | each packageName].
	list := list select: [:each | (string copyFrom: 1 to: (string size min: each size)) = each asUppercase].
	list isEmpty ifTrue: [^''].
	list size = 1 ifTrue: [^list first].
	^(list asSortedCollection: [:a :b | a size <= b size]) last.
!

_referencesToObject: anObject

	^self _streamOfMethods: (self classOrganizer referencesToObject: anObject)
!

_sendersOf: anObject

	| symbol |
	symbol := (anObject isKindOf: String)
		ifTrue: [anObject asSymbol]
		ifFalse: [anObject selector].
	^self _streamOfMethods: (self classOrganizer sendersOf: symbol) first
!

_streamOfMethods: aList

	| stream |
	stream := self _writeStreamOnString.
	aList do: [:each | 
		self
			_addMethod: each 
			toStream: stream.
	].
	^stream contents.
!

_stringOfLineNumbersWithBreaksIn: aGsMethod

	| stepPoints offsets lines stream |
	stepPoints := (aGsMethod class canUnderstand: #'_breakpointIpOffsets')
		ifTrue: [aGsMethod _stepPointsFromBreakIpOffsets: aGsMethod _breakpointIpOffsets]
		ifFalse: [#()].
	offsets := stepPoints collect: [:each | aGsMethod _sourceOffsetsAt: each].
	lines := offsets collect: [:each | 
		((aGsMethod sourceString copyFrom: 1 to: each) select: [:char | char = Character lf]) size + 1.
	].
	stream := self _writeStreamOnString.
	lines do: [:each | each printOn: stream. stream space].
	^self _encodeString: stream contents.
!

compileMethod: methodString behavior: aBehavior symbolList: aSymbolList inCategory: categorySymbol
	"Returns aGsNMethod (if successful) -> anArrayOfErrorsOrWarnings"

	| result |
	"Method is in GsFoundation, but not in GsBase"
	result := (aBehavior class canUnderstand: #'compileMethod:category:using:environmentId:') ifTrue: [
		[
			aBehavior		"returns self or signals a CompileError"
				compileMethod: methodString
				category: categorySymbol
				using: aSymbolList
				environmentId: 0.
			nil.
		] on: (self objectInBaseNamed: #'UndefinedSymbolNotification') do: [:ex | 
			ex resume: false.
		].
	] ifFalse: [(aBehavior class canUnderstand: #'compileMethod:category:using:') ifTrue: [
		[
			aBehavior		"returns self or signals a CompileError"
				compileMethod: methodString
				category: categorySymbol
				using: aSymbolList.
			nil.
		] on: (self objectInBaseNamed: #'UndefinedSymbolNotification') do: [:ex | 
			ex resume: false.
		].
	] ifFalse: [
		aBehavior		"returns nil or an Array of error descriptions"
			compileMethod: methodString
			dictionaries: aSymbolList
			category: categorySymbol.
	]].
	result notNil ifTrue: [
		^nil -> result.
	].
	(aBehavior class canUnderstand: #_primitiveCompileMethod:symbolList:category:oldLitVars:intoMethodDict:intoCategories:intoPragmas:) ifTrue: [
		result := aBehavior 
			_primitiveCompileMethod: methodString
			symbolList: aSymbolList
			category: categorySymbol
			oldLitVars: nil
			intoMethodDict: GsMethodDictionary new 
			intoCategories: GsMethodDictionary new
			intoPragmas: nil.
	] ifFalse: [
		(aBehavior class canUnderstand: #_primitiveCompileMethod:symbolList:category:obsoleteClassNames:oldLitVars:) ifTrue: [
			result := aBehavior 
				_primitiveCompileMethod: methodString
				symbolList: aSymbolList
				category: categorySymbol
				obsoleteClassNames: nil
				oldLitVars: nil.
		] ifFalse: [
			result := aBehavior 
				_primitiveCompileMethod: methodString
				symbolList: aSymbolList
				category: categorySymbol
				oldLitVars: nil
				intoMethodDict: GsMethodDictionary new 
				intoCategories: GsMethodDictionary new.
		].
	].
	(result isKindOf: Array) ifTrue: [
		"in 2.3.x: (Array with: compiledMethod with: errors with: warnings)"
		(result at: 2) notNil ifTrue: [^nil -> (result at: 2)].
		^(result at: 1) -> (result at: 3)
	].
	^result -> nil.
!

compileMethod: methodString behavior: aBehavior user: aUserProfileOrNil inCategory: categoryString
	"answers a String:
		OOP of new method <TAB> selector of new method (or empty if compile failed)
		ERROR: [details] (repeat line for each error)
		[warnings] (if no errors)"

	| userProfile result gsMethod stream errDict errorList sourceString warnings |
	sourceString := self _decodeString: methodString.
	userProfile := aUserProfileOrNil isNil
		ifTrue: [System myUserProfile]
		ifFalse: [aUserProfileOrNil].
	result := self 		"key: GsNMethod value: ((Array withAll: errors) or aStringOfWarnings)"
		compileMethod: sourceString 
		behavior: aBehavior 
		symbolList: userProfile symbolList 
		inCategory: (self _decodeString: categoryString) asSymbol.
	(gsMethod := result key) isNil ifTrue: [
		errorList := result value.
		warnings := ''.
	] ifFalse: [
		errorList := #().
		warnings := result value.
	].
	stream := self _writeStreamOnString.
	gsMethod notNil ifTrue: [
		stream 
			nextPutAll: gsMethod asOop printString;
			tab;
			nextPutAll: gsMethod selector;
			yourself.
	].
	errDict := GemStoneError at: System myUserProfile nativeLanguage.
	errorList do: [:each |
		stream lf; 
			nextPutAll: 'ERROR:'; tab;
			nextPutAll: (each at: 1) printString; tab;
			nextPutAll: (each at: 2) printString; tab;
			yourself.
		(each size >= 3 and: [(each at: 3) notNil]) ifTrue: [
			stream nextPutAll: (each at: 3); tab.
		] ifFalse: [
			(each at: 1) > errDict size ifTrue: [
				stream nextPutAll: '(unknown error number)'; tab.
			] ifFalse: [
				stream nextPutAll: (errDict at: (each at: 1)) asString; tab.
			].
		].
	].
	warnings isNil ifTrue: [warnings := ''].
	stream lf; nextPutAll: warnings.
	^self _encodeString: stream contents
!

implementorsOf: anObject

	| result |
	result := self _implementorsOf: ((anObject isKindOf: Collection)
		ifTrue: [self _decodeString: anObject]
		ifFalse: [anObject]).
	^self _encodeString: result!

implementorsOf: aGsMethod startingAt: aClass

	| selector myClass list |
	selector := aGsMethod selector.
	myClass := aClass.
	list := OrderedCollection new.
	[
		(myClass includesSelector: selector) ifTrue: [list add: myClass].
		(myClass := myClass superclass) notNil.
	] whileTrue: [].
	^self _encodeString: (self _stringForClassList: list).
!

methodsContaining: aString

	^self _encodeString: (self _methodsContaining: (self _decodeString: aString))
!

methodsFor: childClass upTo: parentClass filter: aString isVariables: aBoolean 

	| filterList answerList aClass stream selectors |
	filterList := ((self _decodeString: aString) subStrings: Character tab) reject: [:each | each isEmpty].
	aBoolean ifTrue: [filterList := (filterList collect: [:each | each asSymbol]) asIdentitySet].
	aClass := childClass.
	answerList := IdentitySet new.
	selectors := IdentitySet new.
	[
		| methods |
		methods := self 
			_methodsFor: aClass
			filter: filterList
			isVariables: aBoolean.
		methods do: [:each | 
			(selectors includes: each selector) ifFalse: [
				answerList add: each.
				selectors add: each selector.
			].
		].
		aClass = parentClass.
	] whileFalse: [
		aClass := aClass superclass.
	].
	stream := self _writeStreamOnString.
	answerList do: [:each | self _addMethod: each toStream: stream].
	^self _encodeString: stream contents!

runAsTest: aGsMethod

	aGsMethod inClass debug: aGsMethod selector.
	^true.
!

sbSaveMethod: anOrderedCollection
	"Private - Save in method editor"

	| behavior category string association gsMethod |
	behavior := self sbClassFrom: anOrderedCollection.
	category := anOrderedCollection notEmpty ifTrue: [anOrderedCollection removeFirst] ifFalse: ['other'].
	string := self sbNextParagraph.
	association := self		"key: GsNMethod value: (Array withAll: errors and warnings)"
		compileMethod: string 
		behavior: behavior 
		symbolList: self persistentSymbolList 
		inCategory: category asSymbol.
	(gsMethod := association key) isNil ifTrue: [
		System
			signal: 1001 
			args: (Array with: association value)
			signalDictionary: GemStoneError.
	].
	selections 
		at: #'methodCategory' 	put: (self _behavior: gsMethod inClass categoryOfSelector: gsMethod selector) asString;
		at: #'method'					put: gsMethod selector asString;
		at: #'methodWarnings'	put: association value;
		yourself.
	self systemBrowserUpdate.
!

selectorsMatching: aString

	| user stream list string |
	string := self _decodeString: aString.
	list := (string subStrings: $*) asOrderedCollection collect: [:each | each asUppercase].
	list size - 1 to: 1 do: [:i | list add: $* afterIndex: i].
	string last = $* ifTrue: [list addLast: $*].
	stream := self _writeStreamOnString.
	user := AllUsers 
		userWithId: #SymbolUser 
		ifAbsent: [AllUsers userWithId: #DataCurator].
	list := list asArray.
	list := (user resolveSymbol: #AllSymbols) value select: [:each |each asUppercase matchPattern: list].
	list := list select: [:each | (self classOrganizer implementorsOf: each) notEmpty].
	list := list asSortedCollection.
	list do: [:each | stream nextPutAll: each; nextPut: Character lf; yourself].
	^self _encodeString: stream contents.
!

sendersOf: anObject

	| symbol |
	symbol := (anObject isKindOf: String)
		ifTrue: [(self _decodeString: anObject) asSymbol]
		ifFalse: [anObject selector].
	^self _encodeString: (self _sendersOf: symbol)
!

sourceFor: anObject in: aClass

	| behavior selector packageName category mcTimestamp dict source stream |
	selector := (anObject isKindOf: String) 
		ifTrue: [anObject asSymbol]
		ifFalse: [anObject selector].
	behavior := self
		_behaviorFor: selector 
		in: aClass.
	category := self _behavior: behavior categoryOfSelector: selector.
	packageName := category first = $*
		ifTrue: [self _packageNameFor: category]
		ifFalse: [behavior thisClass _classCategory].
	packageName isNil ifTrue: [packageName := ''].
	mcTimestamp := ''.
	dict := behavior extraDict.
	dict notNil ifTrue: [
		dict := dict at: #'GSMethodStampDict' ifAbsent: [nil].
		dict notNil ifTrue: [
			mcTimestamp := dict
				at: selector
				ifAbsent: [''].
		].
	].
	source := behavior sourceCodeAt: selector.
	stream := self _writeStreamOnString
		nextPutAll: packageName; tab;
		nextPutAll: category; tab;
		nextPutAll: mcTimestamp; lf;
		nextPutAll: source;
		yourself.
	^self _encodeString: stream contents.
!

stepPointsFor: aGsMethod in: aClass

	| behavior method source breakStepPoints stepPoint stream |
	behavior := self
		_behaviorFor: aGsMethod selector
		in: aClass.
	source := behavior sourceCodeAt: aGsMethod selector.
	method := self compiledMethodAt: aGsMethod selector inClass: behavior.
	stream := self _writeStreamOnString.
	breakStepPoints := (aGsMethod class canUnderstand: #'_breakpointIpOffsets')
		ifTrue: [aGsMethod _stepPointsFromBreakIpOffsets: aGsMethod _breakpointIpOffsets]
		ifFalse: [#()].
	stepPoint := 0.
	method _sourceOffsets do: [:each | 
		stepPoint := stepPoint + 1.
		(breakStepPoints includes: stepPoint) ifTrue: [stream nextPut: $B].
		each printOn: stream.
		stream nextPut: Character space.
	].
	stream lf; 
		nextPutAll: (self _stringOfLineNumbersWithBreaksIn: method); lf;
		nextPutAll: source;
		yourself.
	^self _encodeString: stream contents.
!

streamOfMethods: aList

	^self _encodeString: (self _streamOfMethods: aList)
! !
!JadeServer categoriesFor: #_addMethod:toStream:!Methods!private! !
!JadeServer categoriesFor: #_behavior:categoryOfSelector:!Methods!private! !
!JadeServer categoriesFor: #_behaviorFor:in:!Methods!private! !
!JadeServer categoriesFor: #_implementorsOf:!Methods!private! !
!JadeServer categoriesFor: #_methodsContaining:!Methods!private! !
!JadeServer categoriesFor: #_methodsFor:categories:!Methods!private! !
!JadeServer categoriesFor: #_methodsFor:filter:isVariables:!Methods!private! !
!JadeServer categoriesFor: #_methodsFor:variables:!Methods!private! !
!JadeServer categoriesFor: #_packageNameFor:!Methods!private! !
!JadeServer categoriesFor: #_referencesToObject:!Methods!private! !
!JadeServer categoriesFor: #_sendersOf:!Methods!private! !
!JadeServer categoriesFor: #_streamOfMethods:!Methods!private! !
!JadeServer categoriesFor: #_stringOfLineNumbersWithBreaksIn:!Methods!private! !
!JadeServer categoriesFor: #compileMethod:behavior:symbolList:inCategory:!Methods!private!System Browser! !
!JadeServer categoriesFor: #compileMethod:behavior:user:inCategory:!Methods!public! !
!JadeServer categoriesFor: #implementorsOf:!Methods!public! !
!JadeServer categoriesFor: #implementorsOf:startingAt:!public! !
!JadeServer categoriesFor: #methodsContaining:!Methods!public! !
!JadeServer categoriesFor: #methodsFor:upTo:filter:isVariables:!Methods!public! !
!JadeServer categoriesFor: #runAsTest:!Methods!public! !
!JadeServer categoriesFor: #sbSaveMethod:!private!System Browser! !
!JadeServer categoriesFor: #selectorsMatching:!Methods!public! !
!JadeServer categoriesFor: #sendersOf:!Methods!public! !
!JadeServer categoriesFor: #sourceFor:in:!Methods!public! !
!JadeServer categoriesFor: #stepPointsFor:in:!Methods!public! !
!JadeServer categoriesFor: #streamOfMethods:!Methods!public! !

!JadeServer64bit33 methodsFor!

sendersOf: anObject

	^(anObject isKindOf: Utf8)
		ifTrue: [super sendersOf: (self _decodeString: anObject)]
		ifFalse: [super sendersOf: anObject]! !
!JadeServer64bit33 categoriesFor: #sendersOf:!Methods!public! !

!JadeServer64bit3x methodsFor!

_behavior: aBehavior categoryOfSelector: aSymbol

	^aBehavior categoryOfSelector: aSymbol environmentId: environment!

_methodsFor: aClass categories: aList

	| methods |
	methods := IdentitySet new.
	aList do: [:eachCategory | 
		(aClass includesCategory: eachCategory) ifTrue: [
			(aClass selectorsIn: eachCategory) do: [:eachSelector |
				methods add: (self compiledMethodAt: eachSelector inClass: aClass).
			].
		].
	].
	^methods.

!

compileMethod: methodString behavior: aBehavior symbolList: aSymbolList inCategory: categorySymbol
	"Private - returns (nil -> anArrayOfErrors) or (aGsNMethod -> compilerWarnings) or (aGsNMethod -> nil)"

	| method warnings |
	[[
		method := aBehavior
			compileMethod: methodString
			dictionaries: aSymbolList
			category: categorySymbol
			environmentId: environment.
	] on: CompileError do: [:ex |
		^nil -> (ex gsArguments at: 1)
	]] on: CompileWarning do: [:ex |
		warnings := ex gsArguments at: 1.
		ex resume.
	].
	^[	"Above method does not notify package of changes. 
		Repeat compile if possible using method that broadcasts changes (but does not signal warnings).
		See https://github.com/jgfoster/Jade/issues/3."
		aBehavior
			compileMethod: methodString 
			category: categorySymbol 
			using: aSymbolList 
			environmentId: 0.
		(self compiledMethodAt: method key selector inClass: aBehavior) -> warnings.
	] on: Error do: [:ex | 
		ex return: method -> warnings.
	].
! !
!JadeServer64bit3x categoriesFor: #_behavior:categoryOfSelector:!Methods!private! !
!JadeServer64bit3x categoriesFor: #_methodsFor:categories:!Methods!private! !
!JadeServer64bit3x categoriesFor: #compileMethod:behavior:symbolList:inCategory:!Methods!private!System Browser! !

"End of package definition"!

