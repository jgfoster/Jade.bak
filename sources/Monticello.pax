| package |
package := Package name: 'Monticello'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.102'.

package basicScriptAt: #postinstall put: '''Loaded: Monticello'' yourself.'.

package classNames
	add: #MCAddition;
	add: #MCClassDefinition;
	add: #MCDefinition;
	add: #MCDictionaryRepository;
	add: #MCDirectoryRepository;
	add: #MCFileBasedRepository;
	add: #MCFileTreeRepository;
	add: #MCGitHubRepository;
	add: #MCHttpRepository;
	add: #MCHttpRepositoryInfo;
	add: #MCHttpRepositoryInfoDialog;
	add: #MCMethodDefinition;
	add: #MCModification;
	add: #MCModificationTestCase;
	add: #MCOrganizationDefinition;
	add: #MCPackage;
	add: #MCPackageVersion;
	add: #MCPatch;
	add: #MCPatchBrowser;
	add: #MCPatchDiffBrowser;
	add: #MCPatchOperation;
	add: #MCRemoval;
	add: #MCRepository;
	add: #MCRepositoryBrowser;
	add: #MCServerDirectoryRepository;
	add: #MCVersionDialog;
	add: #MCVersionInfo;
	add: #MCVersionName;
	add: #MCWorkingCopy;
	yourself.

package methodNames
	add: #JadeServer -> #_describeMCAddition:on:;
	add: #JadeServer -> #_describeMCClassDefinition:on:;
	add: #JadeServer -> #_describeMCDefinition:on:;
	add: #JadeServer -> #_describeMCMethodDefinition:on:;
	add: #JadeServer -> #_describeMCModification:on:;
	add: #JadeServer -> #_describeMCOrganizationDefinition:on:;
	add: #JadeServer -> #_describeMCRemoval:on:;
	add: #JadeServer -> #_mcDescriptionOfPatch:baseName:alternateName:;
	add: #JadeServer -> #_mcLoadedVersionNames;
	add: #JadeServer -> #_mcRepositoryFrom:;
	add: #JadeServer -> #_mcTopazFrom:on:;
	add: #JadeServer -> #authorInitials:;
	add: #JadeServer -> #mcAddHttpRepository:;
	add: #JadeServer -> #mcAddRepository:toPackage:;
	add: #JadeServer -> #mcAllFileNamesIn:;
	add: #JadeServer -> #mcAllVersionNamesInDict:;
	add: #JadeServer -> #mcCreationTemplateFor:;
	add: #JadeServer -> #mcHttpRepository:user:password:;
	add: #JadeServer -> #mcInitials:;
	add: #JadeServer -> #mcLoadedVersionNames;
	add: #JadeServer -> #mcNewDirectoryRepository:;
	add: #JadeServer -> #mcNewFileTreeRepository:;
	add: #JadeServer -> #mcNewGitHubRepository:;
	add: #JadeServer -> #mcNewServerDirectoryRepository:;
	add: #JadeServer -> #mcPatchFrom:to:inDictionaryRepository:;
	add: #JadeServer -> #mcPatchFrom:to:inFileBasedRepository:;
	add: #JadeServer -> #mcRemoveRepository:;
	add: #JadeServer -> #mcRepositoryFrom:;
	add: #JadeServer -> #mcRepositoryGroup;
	add: #JadeServer -> #mcRepositoryList;
	add: #JadeServer -> #mcStore:name:message:repository:;
	add: #JadeServer -> #mcTopazFrom:inDictionaryRepository:;
	add: #JadeServer -> #mcTopazFrom:inFileRepository:;
	add: #JadeServer -> #mcUniqueVersionNameFor:;
	add: #JadeServer -> #mcUserAndPasswordInHTTP:;
	add: #JadeServer -> #mcVersionInfoFrom:;
	add: #JadeServer -> #mcVersionInfoFromDictionaryPackageNamed:in:;
	add: #JadeServer -> #mcVersionInfoFromFileNamed:in:;
	add: #JadeServer -> #mcVersionLoad:fromDictionary:autoMigrate:;
	add: #JadeServer -> #mcVersionLoad:fromFile:autoMigrate:;
	add: #JadeServer -> #mcVersionMerge:from:autoMigrate:;
	add: #JadeServer -> #mcVersionNameAndMessageFrom:;
	add: #JadeServer -> #mcWorkingCopyClass;
	add: #JadeTextDocument -> #jadeBrowseMonticello;
	add: #JadeToolsToolBarPresenter -> #browseMonticello;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\IDE\Base\Development System'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Boolean\Dolphin Boolean Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Cards\Dolphin Card Containers'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\Core\Object Arts\Dolphin\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Difference\Dolphin Differences Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Rich Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'GemStone Objects'
	'GemStone Session'
	'Jade UI Base'
	'..\Core\Contributions\Camp Smalltalk\SUnit\SUnit'
	'..\Core\Object Arts\Dolphin\ActiveX\Shell\Windows Shell Namespace').

package!

"Class Definitions"!

Object subclass: #MCDefinition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #MCHttpRepositoryInfo
	instanceVariableNames: 'location user password'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #MCVersionName
	instanceVariableNames: 'name isLoaded isModified'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCPackage
	instanceVariableNames: 'repository versionNames loaded'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCPackageVersion
	instanceVariableNames: 'date time author id ancestors stepChildren message'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCPatch
	instanceVariableNames: 'operations'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCPatchOperation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCVersionInfo
	instanceVariableNames: 'date time author id ancestors stepChildren message'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GsObject subclass: #MCWorkingCopy
	instanceVariableNames: 'isModified ancestors repositories'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCPatchOperation subclass: #MCAddition
	instanceVariableNames: 'definition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCPatchOperation subclass: #MCModification
	instanceVariableNames: 'obsoletion obsoletionMemo obsoletionMemoMarkers obsoletionLines modification modificationMemo modificationMemoMarkers modificationLines'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCPatchOperation subclass: #MCRemoval
	instanceVariableNames: 'definition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCRepository subclass: #MCDictionaryRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCRepository subclass: #MCFileBasedRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCFileBasedRepository subclass: #MCDirectoryRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCFileBasedRepository subclass: #MCHttpRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCDirectoryRepository subclass: #MCServerDirectoryRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCServerDirectoryRepository subclass: #MCFileTreeRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCFileTreeRepository subclass: #MCGitHubRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCDefinition subclass: #MCClassDefinition
	instanceVariableNames: 'className definition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCDefinition subclass: #MCMethodDefinition
	instanceVariableNames: 'classIsMeta source category selector className timeStamp'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MCDefinition subclass: #MCOrganizationDefinition
	instanceVariableNames: 'categories'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Dialog subclass: #MCHttpRepositoryInfoDialog
	instanceVariableNames: 'locationPresenter userPresenter passwordPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Dialog subclass: #MCVersionDialog
	instanceVariableNames: 'namePresenter messagePresenter repositoryListPresenter httpUserPresenter httpPasswordPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #MCPatchBrowser
	instanceVariableNames: 'patch includeIdenticalPresenter operationListPresenter leftTextPresenter leftMemoPresenter rightTextPresenter rightMemoPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #MCPatchDiffBrowser
	instanceVariableNames: 'patch includeIdenticalPresenter operationListPresenter diffPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeShell subclass: #MCRepositoryBrowser
	instanceVariableNames: 'repositoryListPresenter packageListPresenter versionListPresenter repositoryCreationTemplatePresenter versionNamePresenter versionDatePresenter versionTimePresenter versionAuthorPresenter versionIDPresenter versionAncestorsPresenter versionStepChildrenPresenter versionMessagePresenter loadedVersionNames'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #MCModificationTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeServer methodsFor!

_describeMCAddition: anMCAddition on: aStream

	aStream 
		nextPut: $A; tab;
		nextPutAll: (self oopOf: anMCAddition) printString; tab;
		yourself.
	self 
		_describeMCDefinition: anMCAddition definition 
		on: aStream.
!

_describeMCClassDefinition: anMCClassDefinition on: aStream

	| string |
	string := anMCClassDefinition definitionString collect: [:char |
		char = Character lf
			ifTrue: [Character cr]
			ifFalse: [char].
	].
	aStream
		nextPut: $C; tab;
		nextPutAll: string; lf;
		yourself.
!

_describeMCDefinition: anMCDefinition on: aStream

	anMCDefinition isMethodDefinition ifTrue: [
		self 
			_describeMCMethodDefinition: anMCDefinition 
			on: aStream.
		^self.
	].
	anMCDefinition isOrganizationDefinition ifTrue: [
		self 
			_describeMCOrganizationDefinition: anMCDefinition 
			on: aStream.
		^self.
	].
	anMCDefinition isClassDefinition ifTrue: [
		self 
			_describeMCClassDefinition: anMCDefinition 
			on: aStream.
		^self.
	].
	self halt.
!

_describeMCMethodDefinition: anMCMethodDefinition on: aStream

	aStream
		nextPut: $M; tab;
		nextPutAll: anMCMethodDefinition timeStamp; tab;
		nextPutAll: anMCMethodDefinition className; tab;
		nextPutAll: anMCMethodDefinition classIsMeta printString; tab;
		nextPutAll: anMCMethodDefinition category; tab;
		nextPutAll: anMCMethodDefinition selector; tab;
		nextPutAll: anMCMethodDefinition source size printString; tab;
		nextPutAll: anMCMethodDefinition source; lf.
!

_describeMCModification: anMCModification on: aStream

	aStream nextPut: $M; tab;
		nextPutAll: (self oopOf: anMCModification) printString; tab;
		yourself.
	self 
		_describeMCDefinition: anMCModification obsoletion 
		on: aStream.
	self 
		_describeMCDefinition: anMCModification modification 
		on: aStream.
!

_describeMCOrganizationDefinition: anMCOrganizationDefinition on: aStream

	aStream
		nextPut: $O; tab;
		yourself.
	anMCOrganizationDefinition categories do: [:each | 
		aStream nextPutAll: each; tab.
	].
	aStream lf.
!

_describeMCRemoval: anMCRemoval on: aStream

	aStream nextPut: $R; tab;
		nextPutAll: (self oopOf: anMCRemoval) printString; tab;
		yourself.
	self 
		_describeMCDefinition: anMCRemoval definition 
		on: aStream.
!

_mcDescriptionOfPatch: aPatch baseName: aString1 alternateName: aString2

	| stream |
	stream := self _writeStreamOnString.
	(self oopOf: aPatch) printOn: stream.
	stream 
		tab; nextPutAll: (aString1 isNil ifTrue: ['loaded'] ifFalse: [aString1]);
		nextPutAll: ' vs. ';
		nextPutAll: (aString2 isNil ifTrue: ['loaded'] ifFalse: [aString2]);
		lf.
	aPatch operations do: [:each | 
		each isAddition 	ifTrue: [self _describeMCAddition: 		each on: stream].
		each isModification 	ifTrue: [self _describeMCModification: 	each on: stream].
		each isRemoval 	ifTrue: [self _describeMCRemoval: 		each on: stream].
	].
	^stream contents.

!

_mcLoadedVersionNames

	| mcWorkingCopyClass stream |
	(mcWorkingCopyClass := self mcWorkingCopyClass) isNil ifTrue: [^nil].
	stream := self _writeStreamOnString.
	mcWorkingCopyClass allManagers do: [:each | 
		| packageOrVersion |
		packageOrVersion := each ancestors
			detect: [:ignored | true]
			ifNone: [each package].
		packageOrVersion := packageOrVersion notNil
			ifTrue: [packageOrVersion name]
			ifFalse: [''].
		stream
			nextPutAll: packageOrVersion; tab;
			nextPut: (each modified ifTrue: [$Y] ifFalse: [$N]); tab;
			nextPutAll: each package name;
			lf.
	].
	^stream contents.
!

_mcRepositoryFrom: aRepository

	| stream |
	stream := self _writeStreamOnString.
	(self oopOf: aRepository) printOn: stream.
	stream 
		tab;
		nextPutAll: aRepository description;
		tab;
		nextPutAll: aRepository class name;
		tab.
	^stream contents.
!

_mcTopazFrom: aSnapshot on: aStream

	| classes dict parents methods queue |
	classes := aSnapshot definitions select: [:each | each isClassDefinition].
	dict := Dictionary new.
	classes do: [:each | 
		| parent myself |
		parent := dict 
			at: each superclassName 
			ifAbsentPut: [nil -> Set new].
		myself := dict
			at: each className
			ifAbsentPut: [nil -> Set new].
		myself key: each.
		parent value add: myself.
	].
	dict := dict reject: [:each | each key isNil].
	parents := dict keys.
	dict copy do: [:each | 
		(parents includes: each key superclassName) ifTrue: [
			dict removeKey: each key className.
		].
	].
	queue := (dict asSortedCollection: [:a :b | a key <= b key]) asOrderedCollection.
	[
		queue notEmpty.
	] whileTrue: [
		| assoc children def |
		assoc := queue removeFirst.
		children := (assoc value asSortedCollection: [:a :b | a key <= b key]) asOrderedCollection.
		queue := children , queue.
		def := assoc key.
		aStream 
			nextPutAll: '!! - ' , def className; lf;
			nextPutAll: '!! - ' , def commentStamp; lf;
			nextPutAll: 'run'; lf;
			nextPutAll: '(' , def superclassName; lf;
			tab; nextPutAll: 'subclass: ' , def className printString; lf;
			tab; nextPutAll: 'instVarNames: #(' , def instanceVariablesString , ')'; lf;
			tab; nextPutAll: 'classVars: #(' , def classVariablesString , ')'; lf;
			tab; nextPutAll: 'classInstVars: #(' , def classInstanceVariablesString , ')'; lf;
			tab; nextPutAll: 'poolDictionaries: #(' , def sharedPoolsString , ')'; lf;
			tab; nextPutAll: 'inDictionary: UserGlobals'; lf;
			tab; nextPutAll: 'instancesInvariant: false'; lf;
			tab; nextPutAll: 'isModifiable: false)'; lf;
			tab; nextPutAll: 'category: ' , def category printString , '.'; lf;
			nextPutAll: 'true.'; lf;
			nextPut: $%; lf;
			yourself.
	].
	methods := aSnapshot definitions select: [:each | each isMethodDefinition].
	methods := methods asSortedCollection.
	classes asSortedCollection do: [:eachClass | 
		| localMethods |
		localMethods := methods select: [:eachMethod | eachClass className = eachMethod className].
		methods removeAll: localMethods.
		aStream
			lf; nextPutAll: '!! - *** - ' , eachClass className; lf;
			nextPutAll: 'removeAllClassMethods ' , eachClass className; lf;
			nextPutAll: 'removeAllMethods ' , eachClass className; lf;
			yourself.
		localMethods do: [:eachMethod | 
			| source |
			source := eachMethod source copyReplaceAll: Character cr asString with: Character lf asString.
			aStream
				nextPutAll: 'category: ''' , eachMethod category , ''''; lf;
				nextPutAll: '!! - ' , eachMethod timeStamp; lf;
				nextPutAll: (eachMethod classIsMeta ifTrue: ['classMethod: '] ifFalse: ['method: ']) , eachMethod className; lf;
				nextPutAll: source; lf;
				nextPut: $%; lf;
				yourself.
		].
	].
	aStream lf; nextPutAll: '!! - *** - loose methods (where class is expected to be already defined)'; lf; lf.
	methods isEmpty ifTrue: [aStream nextPutAll: '!! - (none)'; lf; lf].

	methods do: [:eachMethod | 
		| source |
		source := eachMethod source copyReplaceAll: Character cr asString with: Character lf asString.
		aStream
			nextPutAll: 'category: ''' , eachMethod category , ''''; lf;
			nextPutAll: '!! - ' , eachMethod timeStamp; lf;
			nextPutAll: (eachMethod classIsMeta ifTrue: ['classMethod: '] ifFalse: ['method: ']) , eachMethod className; lf;
			nextPutAll: source; lf;
			nextPut: $%; lf;
			yourself.
	].

	aStream lf; nextPutAll: '!! - *** - class initialization'; lf.
	methods isEmpty ifTrue: [aStream nextPutAll: '!! - (none)'; lf; lf].
	classes do: [:each | 
		aStream nextPutAll: 'send ' , each className , ' initialize'; lf.
	].

!

authorInitials: aString

	| packagePolicy |
	(packagePolicy := self _gsPackagePolicy) isNil ifTrue: [^self].
	packagePolicy authorInitials: (self _decodeString: aString).
!

mcAddHttpRepository: aString

	| list repositoryClass repository group |
	list := (self _decodeString: aString) subStrings: (Character codePoint: 255).
	(repositoryClass := self _mcHttpRepositoryClass) isNil ifTrue: [self error: 'MCHttpRepository not found!!'].
	repository := repositoryClass
		location: (list at: 1)
		user: (list at: 2)
		password: (list at: 3).
	(group := self mcRepositoryGroup) isNil ifTrue: [self error: 'MCRepositoryGroup not found!!'].
	group addRepository: repository.
	^repository!

mcAddRepository: aRepository toPackage: aMCWorkingCopy

	aMCWorkingCopy repositoryGroup addRepository: aRepository.
!

mcAllFileNamesIn: anMCRepository

	| stream |
	stream := self _writeStreamOnString.
	anMCRepository allFileNames do: [:each | 
		stream nextPutAll: each; lf.
	].
	^self _encodeString: stream contents.
!

mcAllVersionNamesInDict: anMCRepository

	| stream list |
	list := anMCRepository dictionary values.
	list := list asSortedCollection: [:a :b | 
		a package name < b package name or: [
		a package name = b package name and: [
		a info date > b info date or: [
		a info date = b info date and: [
		a info time > b info time
	]]]]].
	stream := self _writeStreamOnString.
	list do: [:each | 
		stream nextPutAll: each info name; lf.
	].
	^self _encodeString: stream contents.
!

mcCreationTemplateFor: anMCRepository

	| template |
	(template := anMCRepository asCreationTemplate) isNil ifTrue: [^nil].
	^self _encodeString: template.
!

mcHttpRepository: aRepository user: userString password: passwordString

	aRepository
		user: (self _decodeString: userString);
		password: (self _decodeString: passwordString);
		yourself.
!

mcInitials: aString
	"Do initial setup and return useful information"

	| mcPlatformSupport name string |
	name := self _decodeString: aString.
	string := name , ' (Jade)'.
	[
		self _mcInitialsA: string.
	] whileFalse: [	"Keep shortening it till it fits!!"
		string := string copyFrom: 1 to: string size - 1.
	].
	mcPlatformSupport := self objectInBaseNamed: #'MCPlatformSupport'.
	mcPlatformSupport notNil ifTrue: [mcPlatformSupport setAuthorInitials: name].
	^self _encodeString: self _preferences
!

mcLoadedVersionNames

	| stringOrNil |
	stringOrNil := self _mcLoadedVersionNames.
	stringOrNil isNil ifTrue: [^nil].
	^self _encodeString: stringOrNil
!

mcNewDirectoryRepository: aString

	| mcRepositoryClass fileDirectoryClass repository |
	(mcRepositoryClass := self objectInBaseNamed: #'MCDirectoryRepository') isNil ifTrue: [self error: 'Monticello not available!!'].
	(fileDirectoryClass := self objectInBaseNamed: #'FileDirectory') isNil ifTrue: [self error: 'Monticello not available!!'].
	repository := mcRepositoryClass new directory: (fileDirectoryClass on: (self _decode: aString)).
	self mcRepositoryGroup addRepository: repository.
	^repository!

mcNewFileTreeRepository: aString

	| mcRepositoryClass fileDirectoryClass repository |
	(mcRepositoryClass := self objectInBaseNamed: #'MCFileTreeRepository') isNil ifTrue: [self error: 'Monticello not available!!'].
	(fileDirectoryClass := self objectInBaseNamed: #'ServerFileDirectory') isNil ifTrue: [self error: 'Monticello not available!!'].
	repository := mcRepositoryClass new directory: (fileDirectoryClass on: (self _decodeString: aString)).
	self mcRepositoryGroup addRepository: repository.
	^repository!

mcNewGitHubRepository: aString

	| mcRepositoryClass repository |
	(mcRepositoryClass := self objectInBaseNamed: #'MCGitHubRepository') isNil ifTrue: [self error: 'Monticello not available!!'].
	repository := mcRepositoryClass location: (self _decodeString: aString).
	self mcRepositoryGroup addRepository: repository.
	^mcRepositoryClass!

mcNewServerDirectoryRepository: aString

	| mcDirectoryRepositoryClass fileDirectoryClass repository |
	(mcDirectoryRepositoryClass := self objectInBaseNamed: #'MCServerDirectoryRepository') isNil ifTrue: [self error: 'Monticello not available!!'].
	(fileDirectoryClass := self objectInBaseNamed: #'ServerFileDirectory') isNil ifTrue: [self error: 'Monticello not available!!'].
	repository := mcDirectoryRepositoryClass new directory: (fileDirectoryClass on: (self _decodeString: aString)).
	self mcRepositoryGroup addRepository: repository.
	^repository!

mcPatchFrom: aString1 to: aString2 inDictionaryRepository: aDictionaryRepository

	| index name leftSnapshot rightSnapshot patch string1 string2 |
	string1 := self _decodeString: aString1.
	string2 := self _decodeString: aString2.
	index := string2 findLast: [:each | each = $-].
	name :=string2 copyFrom: 1 to: index - 1.
	(name includes: $.) ifTrue: [name := (name subStrings: $.) first].
	leftSnapshot := string1 isNil ifTrue: [
		(self mcWorkingCopyClass allManagers detect: [:each | each package name = name]) package snapshot.
	] ifFalse: [
		(aDictionaryRepository versionFromVersionNamed: string1) snapshot.
	].
	rightSnapshot := (aDictionaryRepository versionFromVersionNamed: string2) snapshot.
	patch := rightSnapshot patchRelativeToBase: leftSnapshot.
	^self _encodeString: (self 
		_mcDescriptionOfPatch: patch
		baseName: string1
		alternateName: string2)
!

mcPatchFrom: aString1 to: aString2 inFileBasedRepository: aFileRepository

	| index name leftSnapshot rightSnapshot patch string1 string2 |
	string1 := self _decodeString: aString1.
	string2 := self _decodeString: aString2.
	index := string2 findLast: [:each | each = $-].
	name := string2 copyFrom: 1 to: index - 1.
	(name includes: $.) ifTrue: [name := (name subStrings: $.) first].
	leftSnapshot := string1 isNil ifTrue: [
		(self mcWorkingCopyClass allManagers detect: [:each | each package name = name]) package snapshot.
	] ifFalse: [
		(aFileRepository versionFromFileNamed: string1) snapshot.
	].
	rightSnapshot := (aFileRepository versionFromFileNamed: string2) snapshot.
	patch := rightSnapshot patchRelativeToBase: leftSnapshot.
	^self _encodeString: (self 
		_mcDescriptionOfPatch: patch
		baseName: string1
		alternateName: string2)
!

mcRemoveRepository: aRepository

	| group |
	self _mcHttpRepositoryClass isNil ifTrue: [self error: 'MCHttpRepository not found!!'].
	(group := self mcRepositoryGroup) isNil ifTrue: [self error: 'MCRepositoryGroup not found!!'].
	group removeRepository: aRepository.
!

mcRepositoryFrom: aRepository

	^self _encodeString: (self _mcRepositoryFrom: aRepository)
!

mcRepositoryGroup

	| groupClass |
	(groupClass := self objectInBaseNamed: 'MCRepositoryGroup') isNil ifTrue: [^nil].
	^groupClass default.
!

mcRepositoryList

	| group stream |
	(group := self mcRepositoryGroup) isNil ifTrue: [^nil].
	stream := self _writeStreamOnString.
	group repositories do: [:each | 
		stream nextPutAll: (self _mcRepositoryFrom: each).
		stream lf.
	].
	^self _encodeString: stream contents.
!

mcStore: aMCWorkingCopy name: nameString message: messageString repository: aRepository 

	| version |
	version := (aMCWorkingCopy needsSaving not and: [aMCWorkingCopy currentVersionInfo name = (self _decodeString: nameString)]) ifTrue: [
		(self objectInBaseNamed: #'MCVersion')
			package: aMCWorkingCopy package
			info: aMCWorkingCopy currentVersionInfo.
	] ifFalse: [
		aMCWorkingCopy
			newVersionWithName: (self _decodeString: nameString)
			message: (self _decodeString: messageString).
	].
	aRepository storeVersion: version.
	(self objectInBaseNamed: #'MCCacheRepository') default storeVersion: version.
!

mcTopazFrom: aString inDictionaryRepository: aDictionaryRepository

	| snapshot stream string |
	string := self _decodeString: aString.
	snapshot := (aDictionaryRepository versionFromVersionNamed: string) snapshot.
	stream := self _writeStreamOnString
		nextPutAll: '!! ' , string , ' in ' , aDictionaryRepository printString; lf;
		yourself.
	self
		_mcTopazFrom: snapshot
		on: stream.
	^self _encodeString: stream contents.

!

mcTopazFrom: aString inFileRepository: aFileRepository

	| snapshot stream string |
	string := self _decodeString: aString.
	snapshot := (aFileRepository versionFromFileNamed: string) snapshot.
	stream := self _writeStreamOnString
		nextPutAll: '!! ' , string , ' in ' , aFileRepository printString; lf;
		yourself.
	self
		_mcTopazFrom: snapshot
		on: stream.
	^self _encodeString: stream contents.

!

mcUniqueVersionNameFor: anMCWorkingCopy

	^self _encodeString: anMCWorkingCopy uniqueVersionName.
!

mcUserAndPasswordInHTTP: anMCHttpRepository

	^self _encodeString: (anMCHttpRepository user , Character tab asString , anMCHttpRepository password)
!

mcVersionInfoFrom: aVersionInfo

	| stream |
	stream := self _writeStreamOnString.
	(self oopOf: aVersionInfo) printOn: stream.
	stream 
		lf; nextPutAll: aVersionInfo name; 
		lf; nextPutAll: aVersionInfo date yyyymmdd;
		lf.
	aVersionInfo time printOn: stream.
	stream 
		lf; nextPutAll: aVersionInfo author; 
		lf; nextPutAll: aVersionInfo id asString;
		lf.
	aVersionInfo ancestors do: [:each | 
		stream nextPutAll: each name; tab.
	].
	stream lf.
	aVersionInfo stepChildren do: [:each | 
		stream nextPutAll: each name; tab.
	].
	stream lf.
	stream nextPutAll: aVersionInfo message.
	^self _encodeString: stream contents.
!

mcVersionInfoFromDictionaryPackageNamed: aString in: anMCDictionaryRepository

	| string versionInfo |
	string := self _decodeString: aString.
	(versionInfo := anMCDictionaryRepository versionInfoFromVersionNamed: string) isNil ifTrue: [^''].
	^self mcVersionInfoFrom: versionInfo.
!

mcVersionInfoFromFileNamed: aString in: anMCFileBasedRepository

	| string versionInfo |
	string := self _decodeString: aString.
	(versionInfo := anMCFileBasedRepository versionInfoFromFileNamed: string) isNil ifTrue: [^''].
	^self mcVersionInfoFrom: versionInfo.
!

mcVersionLoad: aString fromDictionary: anMCDictionaryRepository autoMigrate: aBoolean

	| version package workingCopy mcPlatformSupport autoMigrate |
	mcPlatformSupport := self objectInBaseNamed: #'MCPlatformSupport'.
	autoMigrate := mcPlatformSupport autoMigrate.
	mcPlatformSupport autoMigrate: aBoolean.
	version := anMCDictionaryRepository versionFromVersionNamed: (self _decodeString: aString).
	version load.
	package := version package.
	workingCopy := self mcWorkingCopyClass forPackage: package.
	workingCopy repositoryGroup addRepository: anMCDictionaryRepository.
	mcPlatformSupport autoMigrate: autoMigrate.
!

mcVersionLoad: aString fromFile: anMCFileBasedRepository autoMigrate: aBoolean

	| version package workingCopy mcPlatformSupport autoMigrate |
	mcPlatformSupport := self objectInBaseNamed: #'MCPlatformSupport'.
	autoMigrate := mcPlatformSupport autoMigrate.
	mcPlatformSupport autoMigrate: aBoolean.
	version := anMCFileBasedRepository loadVersionFromFileNamed: (self _decodeString: aString).
	version load.
	package := version package.
	workingCopy := self mcWorkingCopyClass forPackage: package.
	workingCopy repositoryGroup addRepository: anMCFileBasedRepository.
	mcPlatformSupport autoMigrate: autoMigrate.
!

mcVersionMerge: aString from: anMCFileBasedRepository autoMigrate: aBoolean

	| version mcPlatformSupport autoMigrate workingCopy |
	mcPlatformSupport := self objectInBaseNamed: #'MCPlatformSupport'.
	autoMigrate := mcPlatformSupport autoMigrate.
	mcPlatformSupport autoMigrate: aBoolean.
	version := anMCFileBasedRepository loadVersionFromFileNamed: (self _decodeString: aString).
	workingCopy := self mcWorkingCopyClass forPackage: version package.
	[
		[
			workingCopy merge: version.
		] on: (self objectInBaseNamed: #'MCNoChangesException') do: [:ex | 
			ex return.
		].
	] on: (self objectInBaseNamed: #'MCMergeResolutionRequest') do: [:ex | 
self halt.
		ex merger conflicts do: [:each | each chooseRemote].
		ex merger load.
		workingCopy 
			merged: version;
			modified: true;
			yourself.
		"ex resume: true."
		ex return.
	].

!

mcVersionNameAndMessageFrom: aMCWorkingCopy

	(aMCWorkingCopy needsSaving or: [aMCWorkingCopy ancestors isEmpty]) ifTrue: [
		^(self _encodeString: '<new>	<new>').
	].
	^self _encodeString: aMCWorkingCopy currentVersionInfo name , Character tab asString , aMCWorkingCopy currentVersionInfo message.
!

mcWorkingCopyClass

	^self objectInBaseNamed: #'MCWorkingCopy'.
! !
!JadeServer categoriesFor: #_describeMCAddition:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCClassDefinition:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCDefinition:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCMethodDefinition:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCModification:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCOrganizationDefinition:on:!Monticello!private! !
!JadeServer categoriesFor: #_describeMCRemoval:on:!Monticello!private! !
!JadeServer categoriesFor: #_mcDescriptionOfPatch:baseName:alternateName:!Monticello!private! !
!JadeServer categoriesFor: #_mcLoadedVersionNames!Monticello!public! !
!JadeServer categoriesFor: #_mcRepositoryFrom:!Monticello!private! !
!JadeServer categoriesFor: #_mcTopazFrom:on:!Monticello!private! !
!JadeServer categoriesFor: #authorInitials:!Monticello!public! !
!JadeServer categoriesFor: #mcAddHttpRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcAddRepository:toPackage:!Monticello!public! !
!JadeServer categoriesFor: #mcAllFileNamesIn:!Monticello!public! !
!JadeServer categoriesFor: #mcAllVersionNamesInDict:!Monticello!public! !
!JadeServer categoriesFor: #mcCreationTemplateFor:!Monticello!public! !
!JadeServer categoriesFor: #mcHttpRepository:user:password:!Monticello!public! !
!JadeServer categoriesFor: #mcInitials:!Monticello!public! !
!JadeServer categoriesFor: #mcLoadedVersionNames!Monticello!public! !
!JadeServer categoriesFor: #mcNewDirectoryRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcNewFileTreeRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcNewGitHubRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcNewServerDirectoryRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcPatchFrom:to:inDictionaryRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcPatchFrom:to:inFileBasedRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcRemoveRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcRepositoryFrom:!Monticello!public! !
!JadeServer categoriesFor: #mcRepositoryGroup!Monticello!public! !
!JadeServer categoriesFor: #mcRepositoryList!Monticello!public! !
!JadeServer categoriesFor: #mcStore:name:message:repository:!Monticello!public! !
!JadeServer categoriesFor: #mcTopazFrom:inDictionaryRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcTopazFrom:inFileRepository:!Monticello!public! !
!JadeServer categoriesFor: #mcUniqueVersionNameFor:!Monticello!public! !
!JadeServer categoriesFor: #mcUserAndPasswordInHTTP:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionInfoFrom:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionInfoFromDictionaryPackageNamed:in:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionInfoFromFileNamed:in:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionLoad:fromDictionary:autoMigrate:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionLoad:fromFile:autoMigrate:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionMerge:from:autoMigrate:!Monticello!public! !
!JadeServer categoriesFor: #mcVersionNameAndMessageFrom:!Monticello!public! !
!JadeServer categoriesFor: #mcWorkingCopyClass!Monticello!private! !

!JadeTextDocument methodsFor!

jadeBrowseMonticello

	gciSession hasServer ifTrue: [
		^MCRepositoryBrowser showOnSession: gciSession.
	].
	MessageBox
		warning: 'Server initialization failed at login.'
		caption: 'Unable to Open Browser'.
! !
!JadeTextDocument categoriesFor: #jadeBrowseMonticello!Jade!private! !

!JadeToolsToolBarPresenter methodsFor!

browseMonticello

	MCRepositoryBrowser showOnSession: gciSession.
! !
!JadeToolsToolBarPresenter categoriesFor: #browseMonticello!public! !

"End of package definition"!

