| package |
package := Package name: 'Jade Inspector'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '0.026'.

package basicScriptAt: #postinstall put: 'JadeInspector setNavigationInspector'.

package classNames
	add: #JadeInspector;
	add: #JadeNavigationInspector;
	yourself.

package methodNames
	add: #CodeSourcePresenter -> #jadeInspect;
	add: #JadeServer -> #inspect:;
	add: #JadeServer -> #print:on:;
	add: #JadeServer -> #printStringOf:;
	add: #JadeServer -> #printStringOf:to:;
	add: #JadeServer64bit24 -> #_inspectClientForwarder:;
	add: #JadeServer64bit24 -> #inspect:;
	add: #JadeServer64bit33 -> #print:on:;
	add: #JadeServer64bit33 -> #printStringOf:to:;
	add: #JadeServer64bit3x -> #inspect:;
	add: #Object -> #isJadeInspector;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Models\List\Dolphin List Models'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\List\Dolphin List Presenter'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\Core\Object Arts\Dolphin\MVP\Icons\Dolphin Text Tile Icons'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'GemStone Session'
	'Jade UI Base').

package!

"Class Definitions"!

JadeTextDocument subclass: #JadeInspector
	instanceVariableNames: 'instVarListPresenter'
	classVariableNames: 'DefaultInspectorClass'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeInspector subclass: #JadeNavigationInspector
	instanceVariableNames: 'oopsCollection objectIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!CodeSourcePresenter methodsFor!

jadeInspect

	| result |
	result := self jadeExecuteAndDisplay: false.	result == self ifTrue: [^self].
	JadeInspector showOn: result session: gciSession.
! !
!CodeSourcePresenter categoriesFor: #jadeInspect!Jade!private! !

!JadeServer methodsFor!

inspect: anObject

	| stream string |
	(stream := self _writeStreamOnString)
		nextPutAll: anObject class name; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf.
	(anObject isKindOf: Dictionary superclass) ifTrue: [^self _inspectDictionary: anObject on: stream].
	self _inspectNamedInstanceVariablesOf: anObject on: stream.
	anObject class format > 0 ifTrue: [
		1 to: (anObject _basicSize min: 200) do: [:i | 
			i printOn: stream.
			stream tab.
			self print: (self oopOf: (anObject _at: i)) on: stream.
			stream lf.
		].
	].
	(string := anObject printString) size > 5000 ifTrue: [string := (string copyFrom: 1 to: 5000) , '...'].
	stream nextPutAll: string.
	^self _encodeString: stream contents
!

print: anObject on: aStream
	"convert multi-byte strings to single-byte"

	| string |
	string := self printStringOf: anObject.
	string class == String ifFalse: [
		string := String withAll: (string collect: [:each | (32 <= each asciiValue and: [each asciiValue <= 255]) ifTrue: [each] ifFalse: [$?]]).
	].
	aStream nextPutAll: string.
!

printStringOf: anObject

	^anObject printString.!

printStringOf: anObject to: anInteger

	| string |
	(string := self printStringOf: anObject) size > anInteger ifTrue: [string := (string copyFrom: 1 to: anInteger) , '...'].
	string := String withAll: (string collect: [:each | (32 <= each asciiValue and: [each asciiValue <= 255]) ifTrue: [each] ifFalse: [$?]]).
	^self _encodeString: string.
! !
!JadeServer categoriesFor: #inspect:!Inspector!public! !
!JadeServer categoriesFor: #print:on:!Inspector!public! !
!JadeServer categoriesFor: #printStringOf:!Inspector!private! !
!JadeServer categoriesFor: #printStringOf:to:!Inspector!public! !

!JadeServer64bit24 methodsFor!

_inspectClientForwarder: anObject

	| stream |
	(stream := self _writeStreamOnString)
		nextPutAll: 'ClientForwarder'; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf;
		nextPut: $1; lf;
		nextPutAll: 'clientObject'; tab;
		yourself.
	self print: (self oopOf: anObject clientObject) on: stream.
	stream lf; nextPutAll: (self printStringOf: anObject).
	^self _encodeString: stream contents.
!

inspect: anObject

	^(self _isClientForwarder: anObject)
		ifTrue: [self _inspectClientForwarder: anObject]
		ifFalse: [super inspect: anObject].
! !
!JadeServer64bit24 categoriesFor: #_inspectClientForwarder:!Inspector!private! !
!JadeServer64bit24 categoriesFor: #inspect:!Inspector!public! !

!JadeServer64bit33 methodsFor!

print: anObject on: aStream

	| string |
	string := self printStringOf: anObject.
	aStream nextPutAll: string.
!

printStringOf: anObject to: anInteger

	| string |
	(string := self printStringOf: anObject) size > anInteger ifTrue: [string := (string copyFrom: 1 to: anInteger) , '...'].
	string := String withAll: (string collect: [:each | 32 <= each asciiValue ifTrue: [each] ifFalse: [$?]]).
	^self _encodeString: string.
! !
!JadeServer64bit33 categoriesFor: #print:on:!Inspector!public! !
!JadeServer64bit33 categoriesFor: #printStringOf:to:!Inspector!public! !

!JadeServer64bit3x methodsFor!

inspect: anObject

	| dynamic dynamicSize indexedSize instVarNames namedSize stream string isRcBag |
	(self _isClientForwarder: anObject) ifTrue: [^self _inspectClientForwarder: anObject].
	(stream := self _writeStreamOnString)
		nextPutAll: anObject class name; tab;
		yourself.
	(self oopOf: anObject) printOn: stream.
	stream lf.
	(anObject isKindOf: Dictionary superclass) ifTrue: [^self _inspectDictionary: anObject on: stream].
	instVarNames := anObject class allInstVarNames.
	namedSize := instVarNames size.
	dynamic := anObject dynamicInstanceVariables.
	dynamicSize := dynamic size.
	isRcBag := anObject class name == #RcIdentityBag.
	indexedSize := (anObject class isNsc or: [anObject class isIndexable]) ifFalse: [
		0.
	] ifTrue: [
		isRcBag ifTrue: [ anObject size min: 200] ifFalse: [(anObject _primitiveSize - namedSize)  min: 200].
	].
	
	namedSize + dynamicSize + indexedSize printOn: stream.
	stream lf.
	1 to: instVarNames size do: [:i | 
		stream nextPutAll: (instVarNames at: i); tab.
		self print: (self oopOf: (anObject instVarAt: i)) on: stream.
		stream lf.
	].
	1 to: dynamicSize do: [:i | 
		stream nextPutAll: (dynamic at: i); tab.
		self print: (self oopOf: (anObject dynamicInstVarAt: (dynamic at: i))) on: stream.
		stream lf.
	].
	isRcBag
		ifTrue: [ |aBag |
			aBag := anObject _asIdentityBag.
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self print: (self oopOf: (aBag _at: i )) on: stream.
				stream lf]]
		ifFalse: [
			1 to: indexedSize do: [:i | 
				i printOn: stream.
				stream tab.
				self print: (self oopOf: (anObject _primitiveAt: i + namedSize)) on: stream.
				stream lf] ].

	(string := anObject printString) size > 5000 ifTrue: [string := (string copyFrom: 1 to: 5000) , '...'].
	stream nextPutAll: string.
	^self _encodeString: stream contents.
! !
!JadeServer64bit3x categoriesFor: #inspect:!Inspector!public!Transcript! !

!Object methodsFor!

isJadeInspector

	^false! !
!Object categoriesFor: #isJadeInspector!public!testing! !

"End of package definition"!

